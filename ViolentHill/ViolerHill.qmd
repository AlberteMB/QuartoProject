# Seguridad:

### JWT + OAuth2:

### PROS:

1. **Stateless:** No necesita almacenar sesiones en el backend.
2. **Escalable:** Al no necesitar una DB.
3. **Flexibilidad:** Se puede usar con API RESTful y se integra en microservicios.
4. **Experiencia de usuario:** Opción de elegir el método de acceso.
5. **Portabilidad:** Almacenar el token en localStorage o cookies seguras.
   
   ### Contras:
1. **Revocación compleja:** Si un token se compromete, no se puede invalidar fácilmente sin una estrategia adicional (lista negra, expiración corta, etc.)
2. **Tamaño:** Los tokens pueden ser grandes, lo que afecta al rendimiento.
3. **Seguridad en almacenamiento:** Guardar JWT en `localStorage` puede ser peligroso (ataques `XSS`), por lo que se recomienda usar `httpOnly`.

## Spring Security + OAuth2
### PROS:
1. **Integración fácil:** Spring Security ofrece compatibilidad nativa con OAuth2 para proveedores como Google, Facebook, etc.
2. **Seguridad mejorada:** Se delega la autenticación a proveedores de confianza, reduciendo el riesgo de gestión de contraseñas.
3. **Experiencia de usuario:** Los usuarios pueden iniciar sesión con cuentas existentes sin necesidad de registro adicional.
4. **Gestión centralizada:** Los permisos y roles se pueden definir fácilmente dentro de la aplicación con Spring Security.
5. **Soporte de protocolos estándar:** Compatible con OAuth2 y OpenID Connect para autenticación y autorización.
6. **Protección contra ataques comunes:** Spring Security incluye protecciones contra CSRF, XSS, y autenticación basada en cookies seguras.
### Contras:
1. **Dependencia de terceros:** La aplicación depende de la disponibilidad y cambios en las APIs de Google, Facebook, etc.
2. **Configuración inicial compleja:** Se requiere configuración detallada de clientes OAuth2 y políticas de autorización.
3. **Datos de usuario limitados:** Los proveedores externos pueden restringir la información accesible del usuario.
4. **Privacidad del usuario:** Algunos usuarios pueden ser reacios a utilizar cuentas de terceros para acceder a la aplicación.
5. **Estado en el servidor:** Puede requerir almacenamiento de tokens y sesiones si se combinan con otros mecanismos de seguridad.

## AWS Cognito
### PROS:
1. Autenticación gestionada: AWS Cognito proporciona autenticación lista para usar con soporte de OAuth2, OpenID Connect y SAML.
2. Seguridad mejorada: AWS maneja la gestión de contraseñas, MFA (Autenticación Multifactor) y detección de anomalías.
3. Escalabilidad: Capaz de manejar miles de usuarios sin necesidad de gestión de infraestructura propia.
4. Integración con servicios de AWS: Compatible con otros servicios como API Gateway, Lambda y DynamoDB.
5. Experiencia de usuario: Ofrece una interfaz personalizable para el inicio de sesión (Amazon Cognito Hosted UI).
6. Gestión de usuarios y grupos: Permite roles y permisos para diferenciar accesos fácilmente.
7. Soporte para federación: Compatible con proveedores como Google, Facebook, Apple, y SSO corporativo mediante SAML.
8. Sin mantenimiento de infraestructura: AWS se encarga de la disponibilidad y actualizaciones.
### Contras:
1. Dependencia de AWS: Tu sistema dependerá de la infraestructura de Amazon, lo que podría generar problemas si deseas migrar en el futuro.
Coste: Aunque tiene un nivel gratuito, los costos pueden aumentar con el uso intensivo.
2. Complejidad de configuración: La configuración inicial de grupos de usuarios, roles IAM y políticas puede ser complicada.
3. Latencia: Las llamadas a AWS Cognito pueden añadir latencia si los servidores de la aplicación no están alojados en AWS.
4. Control limitado: Al ser un servicio gestionado, se tiene menos control sobre la implementación interna de la autenticación.
5. Aprendizaje: Requiere familiarizarse con el ecosistema AWS para aprovechar al máximo sus características.
---
# Recomendación de Chat GPT según la referencias que tiene de mí.
## Security + OAuth2 + autenticación por email y contraseña

1. **Es un estándar en la industria:** Aprenderán conceptos fundamentales de seguridad utilizados en proyectos reales.
2. **Fácil de integrar con Spring Boot:** Spring Security ofrece mucha documentación y comunidad de apoyo.
3. **Balance entre seguridad y simplicidad:** Pueden empezar con autenticación por email/contraseña y luego agregar OAuth2 de manera progresiva.
4. **Menor curva de aprendizaje que AWS Cognito:** No necesitan aprender todo el ecosistema AWS, lo que puede ser abrumador.
5. **Evita la complejidad de la gestión de sesiones:** Usar JWT permitirá mantener la aplicación sin estado, pero sin complicaciones como listas negras o revocaciones avanzadas.
6. **Facilidad de migración futura:** Si más adelante quieren adoptar soluciones más avanzadas como Cognito, el aprendizaje de OAuth2 les ayudará.
7. **Control total:** Tienen el control sobre la base de datos de usuarios y pueden personalizar permisos y roles según evolucionen sus necesidades.

## Enfoque recomendado paso a paso para vuestro nivel:
### Autenticación básica con email y contraseña:

1. Implementar un sistema de login/registro con Spring Security.
   - Almacenar contraseñas hasheadas con bcrypt en una base de datos local.
   - Usar JWT almacenado en cookies seguras (httpOnly).
2. Agregar OAuth2 con Google/Facebook:
   - Configurar proveedores externos en Spring Boot.
   - Permitir inicio de sesión sin gestionar contraseñas adicionales.
3. Seguridad adicional:
   - Aplicar validaciones de token con filtros de seguridad de Spring Security.
   - Implementar cierre de sesión y renovación de tokens.

### Nota sobre el punto 5:
 1. **Si usas JWT:**
   -La aplicación será stateless (sin sesiones en el backend), lo que facilita la escalabilidad.
   -No necesitas preocuparte por almacenar sesiones, pero gestionar la revocación de tokens puede ser más complejo (requiere estrategias como listas negras).
2. Si usas sesiones con Spring Security (sin JWT):
   - Spring maneja la sesión automáticamente en la base de datos o en memoria.
   - Las sesiones permiten una revocación fácil (borrar sesión = cerrar sesión).
   - Puede ser más fácil para principiantes, pero menos escalable para aplicaciones grandes.


## UML:

``` {mermaid}
---
title: "Diagrama de Clases - Festival App"
format: html
---

classDiagram

    class User {
        Long id
        String username
        String email
        String password
        List<Festival> favoriteFestivals
    }

    class Festival {
        Long id
        String name
        String description
        LocalDate startDate
        LocalDate endDate
        String location
        Double latitude
        Double longitude
        List<Category> categories
    }

    class Category {
        Long id
        String name
        List<Festival> festivals
    }

    class MapLocation {
        Long id
        Festival festival
        Double latitude
        Double longitude
        String googleMapsLink
    }

    class UserFestival {
        Long id
        User user
        Festival festival
        LocalDate savedAt
        enum Status
        String notes
    }

    User "1" -- "*" Festival : favoriteFestivals
    Festival "*" -- "*" Category : categories
    Festival "1" -- "1" MapLocation : location
    User "1" -- "*" UserFestival : attends
    Festival "1" -- "*" UserFestival : attendedBy
```

### Notas:

1. Duplicidad en la ubicación en Festival y MapLocation: Se suele añadir así para tener una ubicación general y, después otras ubicaciones más concretas para diferentes puntos del festival. Mejora el acceso a la base de datos a una ubicación general. Habría que tenerlas sincronizada para evitar inconsistencias.

2. Clase UserFestival como tabla intermedia entre User y Festival.

## User stories:
1. Como usuario quiero encontrar fiestas recomendadas según mi rango de edad e intereses, para poder disfrutar de eventos acordes a mis preferencias.
2. Como usuario quiero guardar eventos en mi perfil y recibir recordatorios personalizados para no perderme ninguna fiesta importante.
3. Como usuario quiero visualizar ubicaciones de interés cercanas (parkings, transporte público, hoteles) para planificar mejor mi asistencia a las fiestas.
4. Como usuario quiero que me digan las bandas u orquestas para tener más información.
5. Como usuario quiero poder compartir información con el resto de usuarios de la app para recomendar cosas relacionadas con el evento.
6. Como usuario quiero abrir la ubicación del evento en mi aplicación de mapas preferida para llegar fácilmente con un solo clic.
7. Como usuario quiero poder tener un nivel de confianza en cuanto a recomendaciones en determinadas fiestas puntuable por el resto de usuarios para ganar ciertas ventajas en un futuro, además de nivel de usuario en la APP.
8. Como hostelero quiero salir como recomendación de mi local si pago una pequeña cantidad a la app para tener más visibilidad en la APP.
9. Como hostelero quiero poder ofrecer ofertas directamente a quien venga con la app para beneficiarse los usuarios de app y yo.
10. Como extranjero quiero poder buscar la información básica al menos en inglés para ser más accesible.
11. Como usuario quiero poder ver opiniones y comentarios de otros asistentes sobre las fiestas, para conocer experiencias reales antes de asistir.
12. Como usuario quiero poder filtrar fiestas por categoría (música, gastronomía, cultura, etc.), para encontrar las que mejor se adapten a mis intereses.
13. Como organizador quiero tener estadísticas sobre el número de visitas y búsquedas de mi evento para evaluar su impacto.
14. Como usuario quiero recibir notificaciones de última hora sobre cancelaciones o cambios de eventos para estar siempre informado.
15. Como usuario quiero poder descargar eventos a mi calendario personal, para gestionar mejor mi planificación.
16. Como catalán exijo que esté en catalán u os tiro un adoquín de la calle a la cabeza.