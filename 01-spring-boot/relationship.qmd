# Relaciones en JPA

- En JPA, las relaciones entre entidades se definen con anotaciones como `@OneToMany`, `@ManyToOne` y `@ManyToMany`. Es importante entender cómo definir el **Owner** de la relación, cómo gestionar la **Foreign Key**, cuándo usar `@JsonIgnore` y cómo manejar la **carga de datos** con `fetch = LAZY` o `fetch = EAGER`.

## OneToMany
- Se usa `@OneToMany(mappedBy = "...")` en la clase que representa la parte "One". Sólo cuando es bidireccional.
- La parte "Many" se representa con una `List<Tipo>` en la entidad propietaria.
- **Foreign Key:** Se almacena en la tabla de la parte "Many". **En caso de ser `SQL`. En `NoSQL` será diferente.**
- **Unidireccional:** Si solo la entidad "One" tiene la lista. Sólo el que tenga la anotación, contiene `@JoinColumn(name = "...")`.
- **Bidireccional:** Si la entidad "Many" también tiene una referencia a la entidad "One" con `@ManyToOne`.
- **@JsonIgnore:** Se usa en la lista `List<Tipo>` de la parte "One" para evitar ciclos infinitos al serializar a JSON.
- **Carga de datos (`fetch`):** Por defecto es `LAZY`, lo que significa que los datos solo se cargan cuando se acceden por primera vez.
- **Cascade:** Permite que las operaciones en la entidad padre se propaguen a la lista de los hijos.
- **orphanRemoval:** Se usa para indicar que las entidades relacionadas deben eliminarse automáticamente cuando ya no están referenciadas. Asegura que la entidad huérfana sea eliminada físicamente de la base de datos, no solo desasociada.`@OneToMany(mappedBy = "", orphanRemoval = true)`

## ManyToOne
- Se usa `@JoinColumn(name = "...")` en la entidad "Many" para definir la clave foránea.
- La parte "One" se modela con una referencia a un objeto de la entidad relacionada.
- **Foreign Key:** Se almacena en la tabla de la parte "Many". **En caso de ser `SQL`. En `NoSQL` será diferente.**
- **Siempre es unidireccional**, pero se convierte en **bidireccional** si la otra entidad incluye una lista con `@OneToMany(mappedBy = "...")`.
- **@JsonIgnore:** No suele ser necesario aquí, pero si la relación es bidireccional, se debe añadir en la referencia a la parte "One" para evitar ciclos infinitos.
- **Definir el Owner:** La entidad "Many" es la propietaria, ya que contiene la clave foránea con @JoinColumn.

## ManyToMany
- Se usa `@JoinTable` para definir la tabla intermedia.
- Cada entidad tiene una `List<Tipo>` para representar la relación.
- **Foreign Key:** No se almacena en ninguna de las tablas principales, sino en una **tabla intermedia** que contiene dos columnas con claves foráneas, una para cada entidad relacionada. **En caso de ser `SQL`. En `NoSQL` será diferente.**
- **Definición de la tabla intermedia:**
  - Se usa `@JoinTable(name = "...")` para asignarle un nombre.
  - Dentro de `@JoinTable`, se definen dos `@JoinColumn`:
    - `joinColumns = @JoinColumn(name = "...")` → Hace referencia a la clave primaria de la entidad actual.
    - `inverseJoinColumns = @JoinColumn(name = "...")` → Hace referencia a la clave primaria de la otra entidad.
- **Unidireccional:** Si solo una entidad tiene la lista y la anotación `@ManyToMany`.
- **Bidireccional:** Si ambas entidades tienen listas apuntando a la otra y la anotación `@ManyToMany`.
- **@JsonIgnore:** Se debe añadir en una de las listas para evitar bucles de serialización.
- **Definir el Owner:** La entidad que define @JoinTable es la propietaria de la relación. La otra entidad solo usa @ManyToMany(mappedBy = "...").
- **Carga de datos (fetch):** Por defecto es `LAZY` para evitar cargar todas las entidades relacionadas automáticamente.
- **Cascade:** Se añade en la entidad que tiene @JoinTable, que es la propietaria de la relación.

### Ejemplo de tabla intermedia en `@ManyToMany`
``` java
@ManyToMany
@JoinTable(
    name = "student_course",
    joinColumns = @JoinColumn(name = "student_id"),
    inverseJoinColumns = @JoinColumn(name = "course_id")
)
@JsonIgnore
private List<Course> courses;
```

![Ejemplo de relaciones](/home/albertemb/FullStack-Quarto/images/labsb08-4-onetomay.png)

| Opción                | Descripción |
|-----------------------|-------------|
| `CascadeType.ALL`     | Aplica todas las operaciones (`PERSIST`, `MERGE`, `REMOVE`, etc.). |
| `CascadeType.PERSIST` | Guarda automáticamente los hijos cuando se guarda el padre. |
| `CascadeType.MERGE`   | Sincroniza los hijos cuando el padre se actualiza. |
| `CascadeType.REMOVE`  | Elimina los hijos cuando se elimina el padre (**Usar con cuidado**). |
| `CascadeType.DETACH`  | Desvincula los hijos cuando se desvincula el padre. |
| `CascadeType.REFRESH` | Vuelve a cargar los hijos desde la base de datos. |

## FetchType: `LAZY` vs `EAGER`

El **método de carga de datos** en relaciones de JPA se define con `fetch = FetchType.LAZY` o `fetch = FetchType.EAGER`.

### `FetchType.LAZY` (Carga diferida)

- **Comportamiento:** Los datos relacionados **no se cargan** inmediatamente, sino solo cuando se acceden por primera vez.
- **Ventaja:** Mejora el rendimiento al evitar cargar datos innecesarios.
- **Desventaja:** Puede provocar problemas de `LazyInitializationException` si la sesión de Hibernate ya ha sido cerrada antes de acceder a la relación.
- **Uso recomendado:** Para relaciones `@OneToMany` y `@ManyToMany`, donde hay múltiples registros relacionados.

```java
@OneToMany(mappedBy = "parent", fetch = FetchType.LAZY)
private List<Child> children;
```

### `FetchType.EAGER` (Carga inmediata)

- **Comportamiento:** La entidad relacionada se carga **inmediatamente** con la consulta principal.
- **Ventaja:** Evita excepciones de inicialización diferida.
- **Desventaja:** Puede impactar negativamente el rendimiento si hay muchas relaciones cargadas innecesariamente.
- **Uso recomendado:** Para relaciones `@ManyToOne` y en casos donde la relación siempre será usada.

```java
@ManyToOne(fetch = FetchType.EAGER)
@JoinColumn(name = "parent_id")
private Parent parent;
```

---

### ¿Cuándo usar `LAZY` o `EAGER`?

| Relación      | Valor por defecto | Recomendado                |
| ------------- | ----------------- | -------------------------- |
| `@OneToMany`  | `LAZY`            | `LAZY`                     |
| `@ManyToOne`  | `EAGER`           | `LAZY` (mejor rendimiento) |
| `@ManyToMany` | `LAZY`            | `LAZY`                     |

---

Usar `FetchType.LAZY` es generalmente la mejor opción para evitar consultas innecesarias y mejorar el rendimiento de la aplicación. Si se necesita acceder a los datos de una relación `LAZY` después de cerrar la sesión de Hibernate, se recomienda usar **fetch joins** en consultas JPQL o DTOs personalizados.


## Pasos a seguir para configurar relaciones:
- Definir la relación.
- Definir anotaciones.
- Definir JoinColumn o Jointable
- Configurar las anotaciones.