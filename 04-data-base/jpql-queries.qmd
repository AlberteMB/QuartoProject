# JPQL - Queries

## JPQL - Keywords
- | Keyword            | Sample                                      | JPQL snippet                                                                 |
|--------------------|---------------------------------------------|------------------------------------------------------------------------------|
| **Distinct**       | `findDistinctByLastnameAndFirstname`        | `select distinct … where x.lastname = ?1 and x.firstname = ?2`               |
| **And**            | `findByLastnameAndFirstname`                | `… where x.lastname = ?1 and x.firstname = ?2`                               |
| **Or**             | `findByLastnameOrFirstname`                 | `… where x.lastname = ?1 or x.firstname = ?2`                                |
| **Is, Equals**     | `findByFirstname`, `findByFirstnameIs`, `findByFirstnameEquals` | `… where x.firstname = ?1` (or `… where x.firstname IS NULL` if argument is null) |
| **Between**        | `findByStartDateBetween`                    | `… where x.startDate between ?1 and ?2`                                      |
| **LessThan**       | `findByAgeLessThan`                         | `… where x.age < ?1`                                                         |
| **LessThanEqual**  | `findByAgeLessThanEqual`                    | `… where x.age <= ?1`                                                        |
| **GreaterThan**    | `findByAgeGreaterThan`                      | `… where x.age > ?1`                                                         |
| **GreaterThanEqual**| `findByAgeGreaterThanEqual`                | `… where x.age >= ?1`                                                        |
| **After**          | `findByStartDateAfter`                      | `… where x.startDate > ?1`                                                   |
| **Before**         | `findByStartDateBefore`                     | `… where x.startDate < ?1`                                                   |
| **IsNull, Null**   | `findByAge(Is)Null`                         | `… where x.age is null`                                                      |
| **IsNotNull, NotNull**| `findByAge(Is)NotNull`                  | `… where x.age is not null`                                                  |
| **Like**           | `findByFirstnameLike`                       | `… where x.firstname like ?1`                                                |
| **NotLike**        | `findByFirstnameNotLike`                    | `… where x.firstname not like ?1`                                            |
| **StartingWith**   | `findByFirstnameStartingWith`               | `… where x.firstname like ?1` (parameter bound with appended `%`)            |
| **EndingWith**     | `findByFirstnameEndingWith`                 | `… where x.firstname like ?1` (parameter bound with prepended `%`)           |
| **Containing**     | `findByFirstnameContaining`                 | `… where x.firstname like ?1` (parameter bound wrapped in `%`)               |
| **OrderBy**        | `findByAgeOrderByLastnameDesc`              | `… where x.age = ?1 order by x.lastname desc`                                |
| **Not**            | `findByLastnameNot`                         | `… where x.lastname <> ?1`                                                   |
| **In**             | `findByAgeIn(Collection<Age> ages)`         | `… where x.age in ?1`                                                        |
| **NotIn**          | `findByAgeNotIn(Collection<Age> ages)`      | `… where x.age not in ?1`                                                    |
| **True**           | `findByActiveTrue()`                        | `… where x.active = true`                                                    |
| **False**          | `findByActiveFalse()`                       | `… where x.active = false`                                                   |
| **IgnoreCase**     | `findByFirstnameIgnoreCase`                 | `… where UPPER(x.firstname) = UPPER(?1)`                                     |

---

## repository query keywords

| Keyword                                      | Description                                                                                                                                                                                                 |
|----------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `find…By`, `read…By`, `get…By`, `query…By`, `search…By`, `stream…By` | General query method returning typically the repository type, a `Collection`, `Streamable` subtype, or a result wrapper like `Page`, `GeoResults`, or store-specific results. Can be used as `findBy…`, `findMyDomainTypeBy…`, etc. |
| `exists…By`                                  | Exists projection, returning typically a boolean result.                                                                                                                                                    |
| `count…By`                                   | Count projection returning a numeric result.                                                                                                                                                                |
| `delete…By`, `remove…By`                     | Delete query method returning either no result (`void`) or the delete count.                                                                                                                                |
| `…First<number>…`, `…Top<number>…`           | Limits the query results to the first `<number>` of results. This keyword can be placed anywhere between `find` (or other keywords) and `by`.                                                                 |
| `…Distinct…`                                 | Uses a distinct query to return only unique results. Consult store-specific documentation for support. This keyword can be placed anywhere between `find` (or other keywords) and `by`.                      |

---

## Tipos de Queries
### Named
- Las Named Queries son consultas predefinidas que se asocian con una entidad y se declaran con la anotación @NamedQuery o @NamedQueries en la clase de entidad, o dentro del archivo `orm.xml`.
```java
@Entity
@NamedQuery(
    name = "Movie.findByTitle",
    query = "SELECT m FROM Movie m WHERE m.title = :title"
)
public class Movie {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;
}
```
**Ventajas:**

✔ Separación de consultas y lógica de negocio.

✔ Se precompilan en el arranque, lo que mejora el rendimiento.

**Desventajas:**

❌ No es tan flexible como otras opciones.

❌ Si la consulta cambia, debes modificar la entidad.

### Derivadas
- Las Derived Queries (consultas derivadas) se generan automáticamente a partir del nombre del método en el repositorio. Spring Data JPA interpreta el nombre del método y genera la consulta correspondiente.
```java
public interface MovieRepository extends JpaRepository<Movie, Long> {
    List<Movie> findByTitleContaining(String title);
    List<Movie> findByReleaseYearBetween(int startYear, int endYear);
}
```
**Ventajas:**

✔ Simplicidad: No necesitas escribir SQL ni JPQL.

✔ Rápida implementación.

**Desventajas:**

❌ Limitada en complejidad, ya que depende de las convenciones de nombres.

❌ Puede volverse difícil de leer con nombres de métodos largos.

### Native (Pure SQL)
- Las Native Queries permiten escribir consultas en SQL puro, en lugar de JPQL. Se utilizan cuando necesitas aprovechar características específicas del motor de base de datos.
```java
@Query(value = "SELECT * FROM movie WHERE title = ?1", nativeQuery = true)
List<Movie> findByTitleNative(String title);
```
**Ventajas:**

✔ Te permite usar funciones específicas de la base de datos.

✔ Puedes optimizar mejor las consultas.

**Desventajas:**

❌ No es portable entre diferentes bases de datos.

❌ No aprovecha el poder de JPA para la conversión automática de entidades.

---

## Specification (Queries dinámicas)

- **Specification**: Para crear predicados de las queries **dinámicas**.
1. Which Params
2. Related entities. Create JOIN objects.
3. Query: Builder.
4. Arrow function: (root, query, criteriaBuilder) -> (predicate)
5. Body method: create ALL Predicates.

```java
(Root<CLASS> root, CriteriaQuery<?> query, CriteriaBuilder criteriaBuilder)
```
- ? = genérico.