# React
## Create project

1. Install Node.js:
2. Create project with Vite:
``` bash
npm create vite@latest nombre-del-proyecto --template react
```
3. Go to project's directory.
4. Install dependencies:
``` bash
npm install
```
5. Inizialize developing server
``` bash
npm run dev
```
6. Config project:
    - Vite.config.js
    - vite.config.ts
    - src folder
7. Build for production
``` bash
npm run Build
```
8. Preview
``` bash
npm run preview
```
::: { .callout-tip}
## "Dependencias en React"
El "POM" de React se llama package.json. Maven sería npm.
:::

::: {.callout-warning}
## "Arreglar error en npm" 
 ``` bash
rm -rf node_modules package-lock.json dist
npm install
npm run dev
```
:::

## Cards en react
- 'Cards' de React. [MUI-React](https://mui.com/material-ui/react-card/)

## Posibles errores: Guía
 1. Project Structure > package.json
 2. Import/Export
 3. Render (props & states)
 4. BL, Hooks, functions...
 5. Render CSS
 6. Data and "model"
 7. Router, navigation

::: {.callout-tip}
 ## "Datos y eventos" 
Los datos van hacia abajo y los events hacia arriba

![Eventos y datos](/home/albertemb/FullStack-Quarto/images/react_data_events.png)
:::

## Export / Import
| **Sintaxis**       | **Sentencia export**                    | **Sentencia import**                     |
|--------------------|-----------------------------------------|------------------------------------------|
| **Por defecto**    | `export default function Button() {}`  | `import Button from './Button.js';`      |
| **Con nombre**     | `export function Button() {}`          | `import { Button } from './Button.js';`  |

## Ciclo de RENDER
### Tres fases en el ciclo de render
 - Fase de trigger (Trigger externo, de reloj, etc)
 - Fase de render 
 - Fase de commit o pintado por pantalla

::: {# El renderizado tiene que tener un calculo puro .callout-note}
- Mismos inputs que outputs.
- Se basa en su propia lógica de negocio.
:::

## Props
- Desestructuración 'Avatar ({ person, size })'
- Reenviar todas las props con sintaxis de propagación JSX <Avatar {...props} />
- Children : <Card> <Avatar /> </Card> . Avatar aparecerá como children del componente Card.

## Proceso desde Postman a Render
Postman(Mock) -> endpoint -> axios.get (crea{JSON}) -> useEffect ({JSON})-> useState[DATA] -> data.map -> RENDER

## Router
- 
## Objeto literal
- 

### Crear un objeto literal:
    - No lleva comillas, al contrario que un JSON.
``` bash
const object = {
                name: name; 
                age: 4;
                }
```

Setea el nuevo estado del re-render que es un objeto nuevo literal que está creando.
``` bash
setFormData ((---)) => ({

}))
```
---
## Using {}, [], ()...
 | Symbol    | Use Case                  | Example                                                   |
   | --------- | ------------------------- | --------------------------------------------------------- |
   | `{}`      | Object destructuring      | `const { name, age } = obj;`                              |
   | `[]`      | Array destructuring       | `const [first, second] = arr;`                            |
   | `()`      | Function parameters       | `const func = ({ name }) => console.log(name);`           |
   | No Symbol | Invalid for destructuring | `const name, age = obj;` (This will throw a syntax error) |
   
## Explanation   
   | Syntax Element         | `x => x * x`                      | `(x) => (x * x)`             |
   | ---------------------- | --------------------------------- | ---------------------------- |
   | Parameter Parentheses  | Omitted (valid for single params) | Explicitly included          |
   | Expression Parentheses | Not used                          | Used for grouping (optional) |
   | Return Behavior        | Implicit return                   | Implicit return              |
   
## Implicit or explicit return   
   | Feature     | Implicit Return                             | Explicit Return                             |
   | ----------- | ------------------------------------------- | ------------------------------------------- |
   | Syntax      | No `return` keyword or curly braces needed. | Requires `return` keyword and curly braces. |
   | Use Case    | Simple one-liner expressions.               | More complex logic or multiline functions.  |
   | Example     | `const square = x => x * x;`                | `const square = x => { return x * x; };`    |
   | Readability | Concise and clean for short code.           | Better for clarity in complex logic.        |

::: {.callout-tip}
## "Pasos a seguir en el proceso de crear la web"
1. Mock-up (render React).
2. Trigger (humano y no humano).
3. Model data (state).
4. Remove. Todo lo sobrante.
5. Handler.
:::

## Opciones trás pulsar un botón.
- Mensaje 
- Render condicional
- Nueva página
- Deshabilitar el botón.
- Handler
- Modal (useState)

![Estados del formulario](images/responding_to_input_flow.webp)

## Enfoques Declarativo e Imperativo.
### Declarativo
- Describé `qué` quieres que suceda en la UI, sin preocuparte por el `cómo` se implementa.
   - React se encarga de actualizar el DOM basándose en el estado actual.
   - El código describe cómo debería verse la UI y React se encarga de hacer coincidir el DOM con ello.
   - Código `más legible` y fácil de mantener.
### Imperativo
- Describe `cómo` hacerlo cada paso. Instrucciones detalladas para manipular el DOM.
   - Se manipula el DOM manualmente, lo que lleva a código más complejo.
   - Común en JQuery y JavaScript vanilla.
   - Código `menos legible` y difícil de mantener.    