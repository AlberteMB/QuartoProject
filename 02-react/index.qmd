# React
## Create project

1. Install Node.js:
2. Create project with Vite:
``` bash
npm create vite@latest nombre-del-proyecto --template react
```
3. Go to project's directory.
4. Install dependencies:
``` bash
npm install
```
5. Inizialize developing server
``` bash
npm run dev
```
6. Config project:
    - Vite.config.js
    - vite.config.ts
    - src folder
7. Build for production
``` bash
npm run Build
```
8. Preview
``` bash
npm run preview
```
::: {#Dependencias en React .callout-tip}
El "POM" de React se llama package.json. Maven sería npm.
:::

## Posibles errores: Guía
 1. Project Structure > package.json
 2. Import/Export
 3. Render (props & states)
 4. BL, Hooks, functions...
 5. Render CSS
 6. Data and "model"
 7. Router, navigation

 ::: {#Datos y eventos .callout-tip}
Los datos van hacia abajo y los events hacia arriba

![Eventos y datos](/home/albertemb/FullStack-Quarto/images/react_data_events.png)
:::

## Export / Import
| **Sintaxis**       | **Sentencia export**                    | **Sentencia import**                     |
|--------------------|-----------------------------------------|------------------------------------------|
| **Por defecto**    | `export default function Button() {}`  | `import Button from './Button.js';`      |
| **Con nombre**     | `export function Button() {}`          | `import { Button } from './Button.js';`  |

## Ciclo de RENDER
### Tres fases en el ciclo de render
 - Fase de trigger (Trigger externo, de reloj, etc)
 - Fase de render 
 - Fase de commit o pintado por pantalla

::: {# El renderizado tiene que tener un calculo puro .callout-note}
- Mismos inputs que outputs.
- Se basa en su propia lógica de negocio.
:::

## Props
- Desestructuración 'Avatar ({ person, size })'
- Reenviar todas las props con sintaxis de propagación JSX <Avatar {...props} />
- Children : <Card> <Avatar /> </Card> . Avatar aparecerá como children del componente Card.

## Proceso desde Postman a Render
Postman(Mock) -> endpoint -> axios.get (crea{JSON}) -> useEffect ({JSON})-> useState[DATA] -> data.map -> RENDER

## Router
- 

## Spread Operator ... 
- Para trabajar con arrays.Copia rápidamente todo o parte de un array existente.