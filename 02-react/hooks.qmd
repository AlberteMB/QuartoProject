# Hooks
## useState
- El hook useState es utilizado para crear variables de estado, quiere decir que su valor es dinámico, que este puede cambiar en el tiempo y eso requiere una re-renderización del componente donde se utiliza
## useEffect
- **Sincroniza efecto con una dependencia (variable externa o dependencia).** Para ejecutar código cuando se renderiza el componente o cuando cambian las `dependencias` del efecto. 
Se pregunta  con quién se sincroniza. Cuántas veces va a ejecutarse sincronizándose con un trigger concreto (Actulizando la web, reloj, botón, API...).
    **Dependencias:**
    1. Con todos los datos.
    2. Con el state y props.
    3. Sin datos. Corre solo una vez después del primer render.

## useNavigation
- Devuelve info sobre el estado de la navegación. Sirve para conocer si la app está cargando una nueva ruta. Útil para mostrar pantallas de carga o deshabilitar botones mientras la navegación está en curso.

## useRef
- Permite crear referencias a elementos del DOM o valores persistentes sin provocar un re-render.

## useContext
- Permite acceder a valores de un contexto sin necesidad de pasar props manualmente a través de múltiples niveles del árbol de componentes.

✅ Uso principal: Compartir estados globales (tema, autenticación, idioma, etc.).

``` bash
const MyContext = React.createContext();

function Parent() {
  return (
    <MyContext.Provider value="Hola, mundo">
      <Child />
    </MyContext.Provider>
  );
}

function Child() {
  const value = useContext(MyContext);
  return <p>{value}</p>;
}
```

## useReducer
- Es una alternativa a useState, útil para manejar estados complejos con múltiples transiciones.

✅ Uso principal: Estados con lógica avanzada o cuando múltiples acciones afectan el mismo estado.

``` bash 
function reducer(state, action) {
  switch (action.type) {
    case "increment":
      return { count: state.count + 1 };
    case "decrement":
      return { count: state.count - 1 };
    default:
      return state;
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, { count: 0 });

  return (
    <>
      <p>Contador: {state.count}</p>
      <button onClick={() => dispatch({ type: "increment" })}>+</button>
      <button onClick={() => dispatch({ type: "decrement" })}>-</button>
    </>
  );
}
```

## Combinación `useContext + useReducer`:
    - Se usa para manejar estados globales de forma eficiente.