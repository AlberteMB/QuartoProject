# Hooks
## useState
- El hook useState es utilizado para **crear variables de estado**, quiere decir que su valor es dinámico, que este puede cambiar en el tiempo y eso requiere una re-renderización del componente donde se utiliza.
```j̀sx
const [state, setState] = useState(valorInicial);
```

## useEffect
- **Sincroniza efecto con una dependencia (variable externa o dependencia).** Para ejecutar código cuando se renderiza el componente o cuando cambian las `dependencias` del efecto. 
Se pregunta  con quién se sincroniza. Cuántas veces va a ejecutarse sincronizándose con un trigger concreto (Actulizando la web, reloj, botón, API...).
    **Dependencias:**
    1. Con todos los datos.
    2. Con el state y props.
    3. Sin datos. Corre solo una vez después del primer render.
```jsx
useEffect(() => {
  // Código a ejecutar
  return () => {
    // Cleanup (opcional)
  };
}, [dependencias]);
```    

## useRef
- Permite crear referencias a elementos del DOM o valores persistentes sin provocar un re-render.
```jsx
const ref = useRef(valorInicial);
```

## useMemo
- Permite hacer caching con los resultados de cálculos intensos entre re-renders. 
```jsx 
const cachedValue = useMemo( calculateValue, dependencies);
```
<
## useContext
- **Compartir estados entre componentes**. Permite acceder a valores de un contexto sin necesidad de pasar props manualmente a través de múltiples niveles del árbol de componentes.

✅ Uso principal: Compartir estados globales (tema, autenticación, idioma, etc.).

```jsx
const MyContext = React.createContext();

function Parent() {
  return (
    <MyContext.Provider value="Hola, mundo">
      <Child />
    </MyContext.Provider>
  );
}

function Child() {
  const value = useContext(MyContext);
  return <p>{value}</p>;
}
```

## useReducer
- Es una alternativa a useState, útil para **manejar estados complejos** con múltiples transiciones.

✅ Uso principal: Estados con lógica avanzada o cuando múltiples acciones afectan el mismo estado.

```jsx
function reducer(state, action) {
  switch (action.type) {
    case "increment":
      return { count: state.count + 1 };
    case "decrement":
      return { count: state.count - 1 };
    default:
      return state;
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, { count: 0 });

  return (
    <>
      <p>Contador: {state.count}</p>
      <button onClick={() => dispatch({ type: "increment" })}>+</button>
      <button onClick={() => dispatch({ type: "decrement" })}>-</button>
    </>
  );
}
```

## Combinación `useContext + useReducer`:
    - Se usa para manejar estados globales de forma eficiente.

## useNavagation 
- Te permite acceder al estado de la navegación actual, lo que es útil para mostrar indicadores de carga o manejar transiciones entre páginas.   
``` jsx
import { useNavigation } from "react-router-dom";

const MyComponent = () => {
  const navigation = useNavigation();

  return (
    <div>
      {navigation.state === "loading" && <p>Cargando...</p>}
      <p>Contenido principal</p>
    </div>
  );
};
```


## useNavigate
- Te permite navegar programáticamente entre rutas en tu aplicación React. 
- Saber si una navegación está en curso `(navigation.state puede ser "idle", "loading", o "submitting")`.
- Mostrar un `spinner` o mensaje de carga mientras se está navegando.
- Mejorar la UX al evitar clics repetidos en enlaces o botones mientras se carga una nueva página.

``` jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Link, useNavigate } from 'react-router-dom';

function Home() {
  return <h2>Home</h2>;
}

function About() {
  return <h2>About</h2>;
}

function Contact() {
  const navigate = useNavigate();

  const goToHome = () => {
    navigate('/');
  };

  return (
    <div>
      <h2>Contact</h2>
      <button onClick={goToHome}>Go to Home</button>
    </div>
  );
}

function App() {
  return (
    <Router>
      <nav>
        <ul>
          <li>
            <Link to="/">Home</Link>
          </li>
          <li>
            <Link to="/about">About</Link>
          </li>
          <li>
            <Link to="/contact">Contact</Link>
          </li>
        </ul>
      </nav>

      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        <Route path="/contact" element={<Contact />} />
      </Routes>
    </Router>
  );
}

export default App;
```
1. **Router y Routes:** Envolvemos nuestra aplicación en un Router y definimos las rutas usando Routes y Route.

2. **useNavigate:** En el componente Contact, usamos el hook useNavigate para obtener la función navigate. Esta función nos permite navegar a diferentes rutas programáticamente.

3. **Navegación programática:** En el componente Contact, cuando se hace clic en el botón "Go to Home", se llama a la función goToHome, que utiliza navigate('/') para redirigir al usuario a la ruta principal (/).

4. **Links:** Usamos el componente Link para crear enlaces de navegación en la barra de navegación.

### Otros usos:
- **Navegación con estado:** Puedes pasar un objeto de estado al navegar:
``` javascript
navigate('/about', { state: { from: 'contact' } });
```
- **Navegación hacia atrás:** Puedes navegar hacia atrás en el historial:
``` javascript 
navigate(-1);
```
- **Navegación hacia adelante:** Puedes navegar hacia adelante en el historial:
``` javascript 
navigate(1);
```